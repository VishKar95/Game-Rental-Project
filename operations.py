
import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    f= open(product_json_file, 'r')
    data = json.load(f)
    
    if product_ID in data:
        print("Error: Product ID already exists")
        return False
    
    product = {
        "owner": owner,
        "title": product_title,
        "type": product_type,
        "price_per_day": price_per_day,
        "total_stock": total_stock_available,
        "rented_count": 0
    }
    
    data[product_ID] = product
    
    f = open(product_json_file, 'w')
    json.dump(data, f)
    
    return True

    
def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    f = open(product_json_file, 'r')
    data = json.load(f)
    
    products = {k: v for k, v in data.items() if v["owner"] == owner}
    return products

def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list

def Fetch_Product_By_ID(product_json_file,product_ID):
    '''Get product deatils by product ID'''
    f = open(product_json_file, 'r')
    products = json.load(f)
        
    for product in products:
        if product['product_ID'] == product_ID:
            return product
    
    return None


def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    with open(product_json_file, 'r') as f:
        products = json.load(f)
    for product in products:
        if product['Product_ID'] == product_ID and product['Owner'] == Username:
            product[detail_to_be_updated] = new_value
            with open(product_json_file, 'w') as f:
                json.dump(products, f, indent=4)
            return True
    return False

def Add_item_to_wishlist(Username,product_ID,gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    f = open(gamers_json_file, 'r')
    gamers_data = json.load(f)

    if Username not in gamers_data:
        print("Error: User does not exist")
        return False

    wishlist = gamers_data[Username]["wishlist"]

    if product_ID in wishlist:
        print("Error: Product already in wishlist")
        return False

    wishlist.append(product_ID)

    with open(gamers_json_file, 'w') as f:
        json.dump(gamers_data, f)

    return True


def Remove_item_from_wishlist(Username,product_ID,gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    f=open(gamers_json_file, 'r')
    gamers = json.load(f)
    if Username in gamers:
        wishlist = gamers[Username]['wishlist']
        if product_ID in wishlist:
            wishlist.remove(product_ID)
            gamers[Username]['wishlist'] = wishlist
            with open(gamers_json_file, 'w') as f:
                json.dump(gamers, f, indent=4)
            return True
    return False
    

def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    f = open(gamers_json_file, 'r')
    gamers_data = json.load(f)
    with open(products_json_file, 'r') as f:
        products_data = json.load(f)

    if product_ID not in products_data:
        print("Product not found")
        return False
    if products_data[product_ID]['total_stock_available'] < Quantity:
        print("Not enough stock available")
        return False

    item = {
        'product_ID': product_ID,
        'Quantity': Quantity,
        'Price': products_data[product_ID]['price_per_day'],
        'booking_start_date': booking_start_date,
        'booking_end_date': booking_end_date,
    }

    if 'cart' not in gamers_data[Username]:
        gamers_data[Username]['cart'] = []
    gamers_data[Username]['cart'].append(item)

    products_data[product_ID]['total_stock_available'] -= Quantity

    with open(gamers_json_file, 'w') as f:
        json.dump(gamers_data, f, indent=4)
    with open(products_json_file, 'w') as f:
        json.dump(products_data, f, indent=4)

    return True
    

def Remove_item_from_cart(Username,product_ID,gamers_json_file):
    '''Remove items from the cart || Return True if removed successfully else False'''
    f = open(gamers_json_file)
    gamers_data = json.load(file)
    
    if Username in gamers_data:
        if gamers_data[Username]['cart']:
            for item in gamers_data[Username]['cart']:
                if item['product_ID'] == product_ID:
                    gamers_data[Username]['cart'].remove(item)
                    with open(gamers_json_file, 'w') as file:
                        json.dump(gamers_data, file)
                    return True
            return False
        else:
            return False
    else:
        return False

    
def View_Cart(Username,gamers_json_file):
    '''Return the current cart of the user'''
    f= open(gamers_json_file, "r")
    gamers_data = json.load(gamers_file)

    for gamer in gamers_data["Gamers"]:
        if gamer["Username"] == Username:
            return gamer["Cart"]
    return []
    

def Place_order(Username,gamers_json_file,Order_Id,orders_json_file,products_json_file):
    '''Place order || Return True is order placed successfully else False || Decrease the quantity of the product orderd if successfull'''
    with open(gamers_json_file) as f:
        gamers = json.load(f)

    with open(products_json_file) as f:
        products = json.load(f)

    for gamer in gamers:
        if gamer['Username'] == Username:
            cart = gamer['cart']
            order = {'Order_Id': Order_Id,
                     'Username': Username,
                     'Date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                     'Products': []}
            total_price = 0
            with open(orders_json_file, 'r+') as f:
                orders = json.load(f)
                orders.append(order)
                f.seek(0)
                json.dump(orders, f, indent=4)
                f.truncate()
            for item in cart:
                product_id = item['Product ID']
                quantity = item['Quantity']
                for product in products:
                    if product['Product ID'] == product_id:
                        if product['Stock Available'] >= quantity:
                            product['Stock Available'] -= quantity
                            total_price += quantity * product['Price Per Day']
                            order['Products'].append({'Product ID': product_id,
                                                      'Quantity': quantity,
                                                      'Price Per Day': product['Price Per Day']})
                        else:
                            return False
            if total_price <= gamer['Balance']:
                gamer['Balance'] -= total_price
                gamer['cart'] = []
                with open(gamers_json_file, 'w') as f:
                    json.dump(gamers, f, indent=4)
                return True
            else:
                return False
    return False

    

def View_User_Details(gamers_json_file,Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    f = open(gamers_json_file, 'r')
    gamers_data = json.load(f)

    for gamer in gamers_data['gamers']:
        if gamer['Username'] == Username:
            return [gamer]

    return []
    

def Update_User(gamers_json_file,Username,detail_to_be_updated,updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    f = open(gamers_json_file, 'r')
    gamers_data = json.load(f)
    
    for gamer in gamers_data:
        if gamer['Username'] == Username:
            gamer[detail_to_be_updated] = updated_detail
            
            with open(gamers_json_file, 'w') as f:
                json.dump(gamers_data, f, indent=4)
            
            return True
    
    return False

def Fetch_all_orders(orders_json_file,Username):
    '''Fetch all previous orders for the user and return them as a list'''
    with open(orders_json_file, 'r') as f:
        orders = json.load(f)
    
    user_orders = []
    for order in orders:
        if order['Username'] == Username:
            user_orders.append(order)
    
    return user_orders